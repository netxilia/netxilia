/*******************************************************************************
 * 
 * Copyright 2010 Alexandru Craciun, and individual contributors as indicated
 * by the @authors tag. 
 * 
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 ******************************************************************************/
/* Generated By:JJTree: Do not edit this line. ASTUnaryExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.netxilia.spi.impl.formula.parser;

import org.netxilia.api.formula.IFormulaContext;
import org.netxilia.api.formula.IFormulaRenderer;
import org.netxilia.api.value.ErrorValue;
import org.netxilia.api.value.ErrorValueType;
import org.netxilia.api.value.GenericValueType;
import org.netxilia.api.value.IGenericValue;
import org.netxilia.api.value.NumberValue;

/**
 * An AST node representing an unary expression. It extends ASTBinaryExpressions as we consider the unary sign as the
 * other expression.
 */
public class ASTUnaryExpression extends ASTBaseNode {
	private String name;

	public ASTUnaryExpression(int id) {
		super(id);
		name = "Unary";
	}

	public ASTUnaryExpression(FormulaParser p, int id) {
		super(p, id);
		name = "Unary";
	}

	@Override
	public IGenericValue eval(IFormulaContext context) {
		ASTBaseNode nLeft = (ASTBaseNode) jjtGetChild(0);
		ASTBaseNode nRight = (ASTBaseNode) jjtGetChild(1);

		IGenericValue gvOperator = nLeft.eval(context);
		IGenericValue gvValue = nRight.eval(context);

		if (gvValue.getValueType() == GenericValueType.ERROR) {
			return gvValue;
		}

		String op = gvOperator.getStringValue();
		Double val = gvValue.getNumberValue();

		if ((val == null) || (op == null)) {
			return new ErrorValue(ErrorValueType.VALUE);
		}

		if ("+".equals(op)) {
			return gvValue;
		}
		if ("-".equals(op)) {
			return new NumberValue(Double.valueOf(-val.doubleValue()));
		}
		throw new IllegalStateException("BUG: Unknown operator: " + op);
	}

	@Override
	public String text(IFormulaRenderer context) {
		ASTBaseNode nLeft = (ASTBaseNode) jjtGetChild(0);
		ASTBaseNode nRight = (ASTBaseNode) jjtGetChild(1);

		StringBuilder sb = new StringBuilder();
		sb.append(nLeft.text(context));
		sb.append(nRight.text(context));
		return sb.toString();
	}

	@Override
	public String toString(String prefix, IFormulaContext context, IFormulaRenderer renderer) {
		return prefix + name + ":" + text(renderer) + " = " + eval(context);
	}
}
/* JavaCC - OriginalChecksum=f68959a0073d5e647812f51fc9be1d15 (do not edit this line) */
