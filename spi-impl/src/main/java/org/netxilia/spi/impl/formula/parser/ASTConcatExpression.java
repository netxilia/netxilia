/*******************************************************************************
 * 
 * Copyright 2010 Alexandru Craciun, and individual contributors as indicated
 * by the @authors tag. 
 * 
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 ******************************************************************************/
/* Generated By:JJTree: Do not edit this line. ASTConcatExpression.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.netxilia.spi.impl.formula.parser;

import org.netxilia.api.formula.IFormulaContext;
import org.netxilia.api.value.GenericValueType;
import org.netxilia.api.value.IGenericValue;
import org.netxilia.api.value.StringValue;

/**
 * An AST node representing a concatenation of 2 expressions.
 */
public class ASTConcatExpression extends ASTBinaryExpression {
	public ASTConcatExpression(int id) {
		super(id, "Concat");
		setOperator("&");
	}

	public ASTConcatExpression(FormulaParser p, int id) {
		super(p, id, "Concat");
		setOperator("&");
	}

	@Override
	public IGenericValue eval(IFormulaContext context) {
		ASTBaseNode nLeft = (ASTBaseNode) jjtGetChild(0);
		ASTBaseNode nRight = (ASTBaseNode) jjtGetChild(1);

		IGenericValue cvLeft = nLeft.eval(context);
		IGenericValue cvRight = nRight.eval(context);

		if (cvLeft.getValueType() == GenericValueType.ERROR) {
			return cvLeft;
		}
		if (cvRight.getValueType() == GenericValueType.ERROR) {
			return cvRight;
		}
		return new StringValue(cvLeft.getStringValue() + cvRight.getStringValue());
	}
}
/*
 * JavaCC - OriginalChecksum=0348de459c84257de8fa6747e3dae3b8 (do not edit this
 * line)
 */
