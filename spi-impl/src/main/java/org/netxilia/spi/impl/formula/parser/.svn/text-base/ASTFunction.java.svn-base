/*******************************************************************************
 * 
 * Copyright 2010 Alexandru Craciun, and individual contributors as indicated
 * by the @authors tag. 
 * 
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 ******************************************************************************/
/* Generated By:JJTree: Do not edit this line. ASTFunction.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.netxilia.spi.impl.formula.parser;

import org.netxilia.api.formula.IFormulaContext;
import org.netxilia.api.formula.IFormulaRenderer;
import org.netxilia.api.value.ErrorValue;
import org.netxilia.api.value.ErrorValueType;
import org.netxilia.api.value.IGenericValue;
import org.netxilia.spi.impl.formula.function.FunctionRegistry;
import org.netxilia.spi.impl.formula.function.IFunction;

/**
 * An AST node representing a function with its parameters.
 */
public class ASTFunction extends ASTBaseNode {
	private static org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(ASTFunction.class);

	private IFunction fun;
	private String name;

	public ASTFunction(int id) {
		super(id);
	}

	public ASTFunction(FormulaParser p, int id) {
		super(p, id);
	}

	public void setName(String name, FunctionRegistry funReg) {
		try {
			this.name = name.toUpperCase();
			this.fun = funReg.getFunction(this.name);
		} catch (IllegalArgumentException e) {
			// function not found
			log.warn("Unkwnown function:" + name);
			this.fun = null;
		}
	}

	@Override
	protected boolean acceptsAreaChildren() {
		return true;
	}

	@Override
	public IGenericValue eval(IFormulaContext context) {
		if (fun == null) {
			return new ErrorValue(ErrorValueType.NAME);
		}
		ASTBaseNode[] nodes = null;
		if (children != null) {
			nodes = new ASTBaseNode[children.length];
			System.arraycopy(children, 0, nodes, 0, children.length);
		} else {
			nodes = new ASTBaseNode[0];
		}
		return fun.eval(context, nodes);
	}

	@Override
	public String text(IFormulaRenderer context) {
		StringBuilder sb = new StringBuilder(name);
		sb.append("(");
		boolean first = true;
		if (children != null) {
			for (Node n : children) {
				if (!first) {
					sb.append(", ");
				}
				sb.append(((ASTBaseNode) n).text(context));
				first = false;
			}
		}
		sb.append(")");
		return sb.toString();
	}

	public IFunction getFunction() {
		return fun;
	}

	@Override
	public String toString(String prefix, IFormulaContext context, IFormulaRenderer renderer) {
		return prefix + "Function[" + fun.getName() + "]: " + text(renderer) + " = " + eval(context);
	}
}
/* JavaCC - OriginalChecksum=1bef21a78ae6b2b9340e36497c71ec3f (do not edit this line) */
